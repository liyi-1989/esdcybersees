}
cp(500,500,10,20,.5,1,.975)
cp <- function(nr,nr2,m,n,a,b,cl){
counter <- 0
for (i in 1:nr2){
print("i")
pl=gam.pl(nr,m,n,a,b,cl)
pll=pl[1]
plu=pl[2]
if (a*b>=pll&a*b<=plu) {
counter <- counter + 1
}
}
cat("counter/nr2: ", counter/nr2)
}
cp(500,500,10,20,.5,1,.975)
cp <- function(nr,nr2,m,n,a,b,cl){
counter <- 0
for (i in 1:nr2){
print(i)
pl=gam.pl(nr,m,n,a,b,cl)
pll=pl[1]
plu=pl[2]
if (a*b>=pll&a*b<=plu) {
counter <- counter + 1
}
}
cat("counter/nr2: ", counter/nr2)
}
cp(1000,1000,10,20,.5,1,.975)
ptm <- proc.time()
cp(100,100,10,20,.5,1,.975)
proc.time() - ptm
cp <- function(nr,nr2,m,n,a,b,cl){
counter <- 0
for (i in 1:nr2){
pl=gam.pl(nr,m,n,a,b,cl)
pll=pl[1]
plu=pl[2]
if (a*b>=pll&a*b<=plu) {
counter <- counter + 1
}
}
cat("counter/nr2: ", counter/nr2)
}
ptm <- proc.time()
cp(100,100,10,20,.5,1,.975)
proc.time() - ptm
ptm <- proc.time()
cp(300,300,10,20,.5,1,.975)
proc.time() - ptm
cp <- function(nr,nr2,m,n,a,b,cl){
counter <- 0
for (i in 1:nr2){
pl=gam.pl(nr,m,n,a,b,cl)
pll=pl[1]
plu=pl[2]
if (a*b>=pll&a*b<=plu) {
counter <- counter + 1
}
}
cat("counter/nr2: ", counter/nr2)
}
ptm <- proc.time()
cp(500,500,10,20,.5,1,.975)
proc.time() - ptm
library(doParallel)
ncores = detectCores()
ncores
library(doParallel)
ncores = detectCores()
clust = makeCluster(ncores - 2)
registerDoParallel(clust)
#do stuff here
tmp=proc.time()
x<- for(i in 0:9){sqrt(seq(i*10000000,(i+1)*10000000-1))}
proc.time()-tmp
tmp=proc.time()
x<- foreach(i=0:9,combine = 'c') %dopar% sqrt(seq(i*10000000,(i+1)*10000000-1))
proc.time()-tmp
stopCluster(clust)
x
library(doParallel)
ncores = detectCores()
cpforeach <- function(nr,nr2,m,n,a,b,cl){
counter <- 0
PL=matrix(NA,nr2,2)
clust = makeCluster(ncores - 1)
registerDoParallel(clust)
foreach(i=1:nr2) %dopar% {
PL[i,]=gam.pl(nr,m,n,a,b,cl)
}
stopCluster(clust)
for (i in 1:nr2){
if (a*b>=PL[i,1]&a*b<=PL[i,2]) {
counter <- counter + 1
}
}
cat("counter/nr2: ", counter/nr2)
}
tmp=proc.time()
cp(500,500,10,20,.5,1,.975)
proc.time()-tmp
tmp=proc.time()
cpforeach(500,500,10,20,.5,1,.975)
proc.time()-tmp
nr=nr2=500
m=10;n=20;a=0.5;b=1;cl=0.975
counter <- 0
PL=matrix(NA,nr2,2)
clust = makeCluster(ncores - 1)
registerDoParallel(clust)
foreach(i=1:nr2) %dopar% {
PL[i,]=gam.pl(nr,m,n,a,b,cl)
}
stopCluster(clust)
for (i in 1:nr2){
if (a*b>=PL[i,1]&a*b<=PL[i,2]) {
counter <- counter + 1
}
}
PL
PL1=foreach(i=1:nr2,combine = 'rbind') %dopar% {
PL[i,]=gam.pl(nr,m,n,a,b,cl)
}
counter <- 0
PL=matrix(NA,nr2,2)
clust = makeCluster(ncores - 1)
registerDoParallel(clust)
PL1=foreach(i=1:nr2,combine = 'rbind') %dopar% {
PL[i,]=gam.pl(nr,m,n,a,b,cl)
}
PL1
nr2
PL1=foreach(i=1:nr2,combine = 'rbind') %dopar% {
PL[i,]=gam.pl(nr,m,n,a,b,cl)
}
nr
PL1=foreach(i=1:nr2,combine = 'c') %dopar% {
PL[i,]=gam.pl(nr,m,n,a,b,cl)
}
PL1
counter <- 0
PL=matrix(NA,nr2,2)
clust = makeCluster(ncores - 1)
registerDoParallel(clust)
PL1=foreach(i=1:nr2,combine = 'rbind') %dopar% {
#PL[i,]=gam.pl(nr,m,n,a,b,cl)
gam.pl(nr,m,n,a,b,cl)
}
PL1
gam.pl(nr,m,n,a,b,cl)
stopCluster(clust)
counter <- 0
PL=matrix(NA,nr2,2)
clust = makeCluster(ncores - 1)
registerDoParallel(clust)
PL1=foreach(i=1:nr2,combine = 'rbind') %dopar% {
#PL[i,]=gam.pl(nr,m,n,a,b,cl)
temp=gam.pl(nr,m,n,a,b,cl)
PL[i,1]=temp[1]
PL[i,2]=temp[2]
}
stopCluster(clust)
PL1
PL
PL
sqrt(seq(i*10000000,(i+1)*10000000-1))
PL1
counter <- 0
PL=matrix(NA,nr2,2)
clust = makeCluster(ncores - 1)
registerDoParallel(clust)
PL1=foreach(i=1:nr2,combine = 'cbind') %dopar% {
#PL[i,]=gam.pl(nr,m,n,a,b,cl)
gam.pl(nr,m,n,a,b,cl)
# temp=gam.pl(nr,m,n,a,b,cl)
# PL[i,1]=temp[1]
# PL[i,2]=temp[2]
}
stopCluster(clust)
stopCluster(clust)
PL1
View(PL)
counter <- 0
PL=matrix(NA,nr2,2)
clust = makeCluster(ncores - 1)
registerDoParallel(clust)
PL1=foreach(i=1:nr2,combine = 'rbind') %dopar% {
#PL[i,]=gam.pl(nr,m,n,a,b,cl)
gam.pl(nr,m,n,a,b,cl)
# temp=gam.pl(nr,m,n,a,b,cl)
# PL[i,1]=temp[1]
# PL[i,2]=temp[2]
}
stopCluster(clust)
PL1
counter <- 0
PL=matrix(NA,nr2,2)
clust = makeCluster(ncores - 1)
registerDoParallel(clust)
PL1=foreach(i=1:nr2,combine = 'c') %dopar% {
#PL[i,]=gam.pl(nr,m,n,a,b,cl)
gam.pl(nr,m,n,a,b,cl)
# temp=gam.pl(nr,m,n,a,b,cl)
# PL[i,1]=temp[1]
# PL[i,2]=temp[2]
}
stopCluster(clust)
PL1
library(foreach)
counter <- 0
PL=matrix(NA,nr2,2)
clust = makeCluster(ncores - 1)
registerDoParallel(clust)
PL1=foreach(i=1:nr2,combine = 'c') %dopar% {
#PL[i,]=gam.pl(nr,m,n,a,b,cl)
gam.pl(nr,m,n,a,b,cl)
# temp=gam.pl(nr,m,n,a,b,cl)
# PL[i,1]=temp[1]
# PL[i,2]=temp[2]
}
stopCluster(clust)
PL1
counter <- 0
PL=matrix(NA,nr2,2)
clust = makeCluster(ncores - 1)
registerDoParallel(clust)
PL1=foreach(i=1:nr2,combine = 'rbind') %dopar% {
#PL[i,]=gam.pl(nr,m,n,a,b,cl)
gam.pl(nr,m,n,a,b,cl)
# temp=gam.pl(nr,m,n,a,b,cl)
# PL[i,1]=temp[1]
# PL[i,2]=temp[2]
}
stopCluster(clust)
PL1
stopCluster(clust)
stopCluster(clust)
detach("package:doParallel", unload=TRUE)
detectCores()
counter <- 0
PL=matrix(NA,nr2,2)
clust = makeCluster(ncores - 1)
registerDoParallel(clust)
PL1=foreach(i=1:nr2,combine = 'rbind') %dopar% {
#PL[i,]=gam.pl(nr,m,n,a,b,cl)
gam.pl(nr,m,n,a,b,cl)
# temp=gam.pl(nr,m,n,a,b,cl)
# PL[i,1]=temp[1]
# PL[i,2]=temp[2]
}
stopCluster(clust)
library(doParallel)
counter <- 0
PL=matrix(NA,nr2,2)
clust = makeCluster(ncores - 1)
registerDoParallel(clust)
PL1=foreach(i=1:nr2,.combine = 'rbind') %dopar% {
#PL[i,]=gam.pl(nr,m,n,a,b,cl)
gam.pl(nr,m,n,a,b,cl)
# temp=gam.pl(nr,m,n,a,b,cl)
# PL[i,1]=temp[1]
# PL[i,2]=temp[2]
}
stopCluster(clust)
PL1
dim(PL1)
ncores = detectCores()
cpforeach <- function(nr,nr2,m,n,a,b,cl){
counter <- 0
clust = makeCluster(ncores - 1)
registerDoParallel(clust)
PL=foreach(i=1:nr2,.combine = 'rbind') %dopar% {
#PL[i,]=gam.pl(nr,m,n,a,b,cl)
gam.pl(nr,m,n,a,b,cl)
# temp=gam.pl(nr,m,n,a,b,cl)
# PL[i,1]=temp[1]
# PL[i,2]=temp[2]
}
stopCluster(clust)
for (i in 1:nr2){
if (a*b>=PL[i,1]&a*b<=PL[i,2]) {
counter <- counter + 1
}
}
cat("counter/nr2: ", counter/nr2)
}
tmp=proc.time()
cp(500,500,10,20,.5,1,.975)
proc.time()-tmp
tmp=proc.time()
cpforeach(500,500,10,20,.5,1,.975)
proc.time()-tmp
counter <- 0
clust = makeCluster(ncores - 1)
registerDoParallel(clust)
PL=foreach(i=1:nr2,.combine = 'rbind') %dopar% {
#PL[i,]=gam.pl(nr,m,n,a,b,cl)
gam.pl(nr,m,n,a,b,cl)
# temp=gam.pl(nr,m,n,a,b,cl)
# PL[i,1]=temp[1]
# PL[i,2]=temp[2]
}
stopCluster(clust)
for (i in 1:nr2){
if (a*b>=PL[i,1]&a*b<=PL[i,2]) {
counter <- counter + 1
}
}
counter/nr2
cpforeach(500,500,10,20,.5,1,.975)
cpforeach <- function(nr,nr2,m,n,a,b,cl){
gam.pl=function(nr,m,n,a,b,cl){
x=rgamma(n,a)*b
xx <- x^(1/3)
xxbar <- mean(xx)
xxsd <- sd(xx)
n <- length(xx)
y <- seq(1:nr)
ybar <- seq(1:nr)
for (i in 1:nr){
chisq <- (rchisq(1,n-1)/(n-1))
chi <- sqrt(chisq)
z <- rnorm(1)
u <- xxbar+(z/chi)*(xxsd/sqrt(n))
v <- xxsd^2/chisq
Ga <- ((2+(u^2/v))+sqrt(((2+(u^2/v))^2-4)))/18
Gb <- 27*v^(3/2)*sqrt(((2+(u^2/v))+sqrt(((2+(u^2/v))^2-4)))/18)
y <- rgamma(m,m*Ga)*(Gb/m)
ybar[i] <- mean(y)
ybar <- sort(ybar)
ul <- nr*cl
ll <- nr*(1-cl)
pll=ybar[ll]
plu=ybar[ul]
}
return(c(pll,plu))
}
counter <- 0
clust = makeCluster(ncores - 1)
registerDoParallel(clust)
PL=foreach(i=1:nr2,.combine = 'rbind') %dopar% {
#PL[i,]=gam.pl(nr,m,n,a,b,cl)
gam.pl(nr,m,n,a,b,cl)
# temp=gam.pl(nr,m,n,a,b,cl)
# PL[i,1]=temp[1]
# PL[i,2]=temp[2]
}
stopCluster(clust)
for (i in 1:nr2){
if (a*b>=PL[i,1]&a*b<=PL[i,2]) {
counter <- counter + 1
}
}
cat("counter/nr2: ", counter/nr2)
}
cpforeach <- function(nr,nr2,m,n,a,b,cl){
gam.pl=function(nr,m,n,a,b,cl){
x=rgamma(n,a)*b
xx <- x^(1/3)
xxbar <- mean(xx)
xxsd <- sd(xx)
n <- length(xx)
y <- seq(1:nr)
ybar <- seq(1:nr)
for (i in 1:nr){
chisq <- (rchisq(1,n-1)/(n-1))
chi <- sqrt(chisq)
z <- rnorm(1)
u <- xxbar+(z/chi)*(xxsd/sqrt(n))
v <- xxsd^2/chisq
Ga <- ((2+(u^2/v))+sqrt(((2+(u^2/v))^2-4)))/18
Gb <- 27*v^(3/2)*sqrt(((2+(u^2/v))+sqrt(((2+(u^2/v))^2-4)))/18)
y <- rgamma(m,m*Ga)*(Gb/m)
ybar[i] <- mean(y)
ybar <- sort(ybar)
ul <- nr*cl
ll <- nr*(1-cl)
pll=ybar[ll]
plu=ybar[ul]
}
return(c(pll,plu))
}
counter <- 0
clust = makeCluster(ncores - 1)
registerDoParallel(clust)
PL=foreach(i=1:nr2,.combine = 'rbind') %dopar% {
#PL[i,]=gam.pl(nr,m,n,a,b,cl)
gam.pl(nr,m,n,a,b,cl)
# temp=gam.pl(nr,m,n,a,b,cl)
# PL[i,1]=temp[1]
# PL[i,2]=temp[2]
}
stopCluster(clust)
for (i in 1:nr2){
if (a*b>=PL[i,1]&a*b<=PL[i,2]) {
counter <- counter + 1
}
}
cat("counter/nr2: ", counter/nr2)
}
cpforeach(500,500,10,20,.5,1,.975)
tmp=proc.time()
cp(500,500,10,20,.5,1,.975)
proc.time()-tmp
tmp=proc.time()
cpforeach(500,500,10,20,.5,1,.975)
proc.time()-tmp
ncores = detectCores()
cpforeach <- function(nr,nr2,m,n,a,b,cl){
gam.pl=function(nr,m,n,a,b,cl){
x=rgamma(n,a)*b
xx <- x^(1/3)
xxbar <- mean(xx)
xxsd <- sd(xx)
n <- length(xx)
y <- seq(1:nr)
ybar <- seq(1:nr)
for (i in 1:nr){
chisq <- (rchisq(1,n-1)/(n-1))
chi <- sqrt(chisq)
z <- rnorm(1)
u <- xxbar+(z/chi)*(xxsd/sqrt(n))
v <- xxsd^2/chisq
Ga <- ((2+(u^2/v))+sqrt(((2+(u^2/v))^2-4)))/18
Gb <- 27*v^(3/2)*sqrt(((2+(u^2/v))+sqrt(((2+(u^2/v))^2-4)))/18)
y <- rgamma(m,m*Ga)*(Gb/m)
ybar[i] <- mean(y)
ybar <- sort(ybar)
ul <- nr*cl
ll <- nr*(1-cl)
pll=ybar[ll]
plu=ybar[ul]
}
return(c(pll,plu))
}
counter <- 0
clust = makeCluster(ncores)
registerDoParallel(clust)
PL=foreach(i=1:nr2,.combine = 'rbind') %dopar% {
gam.pl(nr,m,n,a,b,cl)
}
stopCluster(clust)
for (i in 1:nr2){
if (a*b>=PL[i,1]&a*b<=PL[i,2]) {
counter <- counter + 1
}
}
cat("counter/nr2: ", counter/nr2)
}
tmp=proc.time()
cp(500,500,10,20,.5,1,.975)
proc.time()-tmp
tmp=proc.time()
cpforeach(500,500,10,20,.5,1,.975)
proc.time()-tmp
tmp=proc.time()
cp(1000,1000,10,20,.5,1,.975)
proc.time()-tmp
tmp=proc.time()
cpforeach(1000,1000,10,20,.5,1,.975)
proc.time()-tmp
# ipython nbconvert script.ipynb --to slides --post serve
library(MASS)
library(ncdf4)
get_gcm=function(mylon,mylat){
cat("In position: ",mylon,mylat,"\n")
files=list.files("./gcm")
pr=NULL
for(i in files){
cat("Read in file ",i,"\n")
ncin = nc_open(paste0("./gcm/",i))
lon = ncvar_get(ncin,"lon")
lat = ncvar_get(ncin,"lat")
Pr=ncvar_get(ncin,"pr")
pr=c(pr,Pr[((mylon-0.1)<lon)&(lon<(mylon+0.1)),((mylat-0.1)<lat)&(lat<(mylat+0.1)),])
}
prm=matrix(pr,365,length(pr)/365)
return(prm)
}
X=get_gcm(-116.25+180,43) # kg/m^2/s = mm/hr *3600
colnames(X)=1975:2005; rownames(X)=1:365
X=X[,5:29] * 3600 * 24 # mm # 365 days * 25 years
MON=1:365; names(MON)=c(rep("JAN",31),rep("FEB",28),rep("MAR",31),rep("APR",30),rep("MAY",31),rep("JUN",30),rep("JUL",31),rep("AUG",31),rep("SEP",30),rep("OCT",31),rep("NOV",30),rep("DEC",31))
X1=X[MON[names(MON)=="JAN"],] # 31 days * 25 years
X1m=apply(X1,2,sum) # 1 month * 25 years
setwd("~/Documents/esdcybersees")
# ipython nbconvert script.ipynb --to slides --post serve
library(MASS)
library(ncdf4)
get_gcm=function(mylon,mylat){
cat("In position: ",mylon,mylat,"\n")
files=list.files("./gcm")
pr=NULL
for(i in files){
cat("Read in file ",i,"\n")
ncin = nc_open(paste0("./gcm/",i))
lon = ncvar_get(ncin,"lon")
lat = ncvar_get(ncin,"lat")
Pr=ncvar_get(ncin,"pr")
pr=c(pr,Pr[((mylon-0.1)<lon)&(lon<(mylon+0.1)),((mylat-0.1)<lat)&(lat<(mylat+0.1)),])
}
prm=matrix(pr,365,length(pr)/365)
return(prm)
}
X=get_gcm(-116.25+180,43) # kg/m^2/s = mm/hr *3600
colnames(X)=1975:2005; rownames(X)=1:365
X=X[,5:29] * 3600 * 24 # mm # 365 days * 25 years
MON=1:365; names(MON)=c(rep("JAN",31),rep("FEB",28),rep("MAR",31),rep("APR",30),rep("MAY",31),rep("JUN",30),rep("JUL",31),rep("AUG",31),rep("SEP",30),rep("OCT",31),rep("NOV",30),rep("DEC",31))
X1=X[MON[names(MON)=="JAN"],] # 31 days * 25 years
X1m=apply(X1,2,sum) # 1 month * 25 years
