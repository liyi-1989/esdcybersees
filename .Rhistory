m=genm(m)
#norm(m,type="2")
#eigen(m)$values
plot(eigen(m)$values)
eigv=rep(0,10)
for(n in 1:10){
m=matrix(0,n*10,n*10)
m=genm(m)
eigv[n]=norm(m,type="2")
}
plot((1:10)*10,eigv)
Ns=(1:10)*10
eigv=rep(0,length(Ns))
for(i in 1:length(Ns)){
m=matrix(0,Ns[i],Ns[i])
m=genm(m)
eigv[i]=norm(m,type="2")
}
plot(Ns,eigv,xlab="size",ylab="spectral norm")
Ns=(1:20)*10
eigv=rep(0,length(Ns))
for(i in 1:length(Ns)){
m=matrix(0,Ns[i],Ns[i])
m=genm(m)
eigv[i]=norm(m,type="2")
}
plot(Ns,eigv,xlab="size",ylab="spectral norm")
Ns=(1:50)*10
eigv=rep(0,length(Ns))
for(i in 1:length(Ns)){
m=matrix(0,Ns[i],Ns[i])
m=genm(m)
eigv[i]=norm(m,type="2")
}
plot(Ns,eigv,xlab="size",ylab="spectral norm")
Ns=(1:9)*100
eigv=rep(0,length(Ns))
for(i in 1:length(Ns)){
m=matrix(0,Ns[i],Ns[i])
m=genm(m)
eigv[i]=norm(m,type="2")
}
plot(Ns,eigv,xlab="size",ylab="spectral norm")
Ns=(1:10)*50
eigv=rep(0,length(Ns))
for(i in 1:length(Ns)){
m=matrix(0,Ns[i],Ns[i])
m=genm(m)
eigv[i]=norm(m,type="2")
}
plot(Ns,eigv,xlab="size",ylab="spectral norm")
n=200
m=matrix(0,n,n)
m=genm(m)
X= mvrnorm(n=1000,rep(0,n),m)
library(MASS)
X= mvrnorm(n=1000,rep(0,n),m)
dim(X)
cov(X)
n=10
m=matrix(0,n,n)
m=genm(m)
X= mvrnorm(n=1000,rep(0,n),m)
cov(X)
m
norm(m-cov(X),type=2)
norm(m-cov(X),type="2")
Ns=(1:10)*20
err=rep(0,length(Ns))
for(i in 1:length(Ns)){
m=matrix(0,Ns[i],Ns[i])
m=genm(m)
X= mvrnorm(n=1000,rep(0,Ns[i]),m)
err[i]=norm(m-cov(X),type="2")
}
plot(Ns,err,xlab="matrix size",ylab="spectral norm of error(\hat{\Sigma}-\Sigma)")
plot(Ns,err,xlab="matrix size",ylab="spectral norm of error(\Sigma hat-\Sigma)")
plot(Ns,err,xlab="matrix size",ylab="spectral norm of error(Sample Covariance-True Covariance)")
plot(Ns,err,xlab="matrix size",ylab="spectral norm of error(Sample-True)")
Ns=(1:10)*50
err=rep(0,length(Ns))
for(i in 1:length(Ns)){
m=matrix(0,Ns[i],Ns[i])
m=genm(m)
X= mvrnorm(n=1000,rep(0,Ns[i]),m)
err[i]=norm(m-cov(X),type="2")
}
plot(Ns,err,xlab="matrix size",ylab="spectral norm of error(Sample-True)")
N=1000
Ss=(1:10)*100
err=rep(0,length(Ss))
for(i in 1:length(Ss)){
m=matrix(0,N,N)
m=genm(m)
X= mvrnorm(n=Ss[i],rep(0,N),m)
err[i]=norm(m-cov(X),type="2")
}
plot(Ss,err,xlab="Sample size",ylab="spectral norm of error(Sample-True)")
genm=function(N){
M=matrix(0,N,N)
for(i in 1:N){
for(j in 1:N){
M[i,j]=eval(i,j)
}
}
return(M)
}
n=200
m=genm(n)
#norm(m,type="2")
#eigen(m)$values
plot(eigen(m)$values,main="Eigenvalues of M")
Ns=(1:10)*50
eigv=rep(0,length(Ns))
for(i in 1:length(Ns)){
m=genm(Ns[i])
eigv[i]=norm(m,type="2")
}
plot(Ns,eigv,xlab="matrix size",ylab="spectral norm")
Ns=(1:10)*20
eigv=rep(0,length(Ns))
for(i in 1:length(Ns)){
m=genm(Ns[i])
eigv[i]=norm(m,type="2")
}
plot(Ns,eigv,xlab="matrix size",ylab="spectral norm")
Ns=(1:10)*10
eigv=rep(0,length(Ns))
for(i in 1:length(Ns)){
m=genm(Ns[i])
eigv[i]=norm(m,type="2")
}
plot(Ns,eigv,xlab="matrix size",ylab="spectral norm")
n=10
m=genm(n)
X= mvrnorm(n=1000,rep(0,n),m)
norm(m-cov(X),type="2")
Ns=(1:10)*50
err=rep(0,length(Ns))
for(i in 1:length(Ns)){
m=genm(Ns[i])
X= mvrnorm(n=1000,rep(0,Ns[i]),m)
err[i]=norm(m-cov(X),type="2")
}
plot(Ns,err,xlab="matrix size",ylab="spectral norm of error(Sample-True)")
N=1000
Ss=(1:100)*10
err=rep(0,length(Ss))
for(i in 1:length(Ss)){
m=genm(N)
X= mvrnorm(n=Ss[i],rep(0,N),m)
err[i]=norm(m-cov(X),type="2")
}
plot(Ss,err,xlab="Sample size",ylab="spectral norm of error(Sample-True)")
plot(Ss,err,xlab="Sample size",ylab="spectral norm of error(Sample-True)",main="dimension is 1000")
x=runif(1000)
y=x^2
cor(x,y)
y=(x-0.5)^2
cor(x,y)
cov(x,y)
geninf=function(a){
n=length(a)
M=matrix(0,n,n)
for(i in 1:n){
for(j in 1:n){
M[i,j]=a[max(i,j)]
}
}
return(M)
}
geninf(c(1,2,3))
eig(geninf(1:3))
eigen(geninf(1:3))
eigen(geninf(1:5))
eigen(geninf(5:1))
eigen(geninf(4:1))
eigen(geninf(10:1))
eval=function(i,j){
r=exp(-0.05*sqrt(i^2+j^2))
return(r)
}
genm=function(N){
M=matrix(0,N,N)
for(i in 1:N){
for(j in 1:N){
M[i,j]=eval(i,j)
}
}
return(M)
}
genm(5)
eigen(genm(5))
eigen(genm(6))
eigen(genm(7))
eigen(genm(7))$values>0
eigen(genm(8))$values>0
eigen(genm(9))$values>0
eigen(genm(10))$values>0
eigen(geninf(4:1))$values>0
eigen(geninf(cbind(4,2,1,0.5)))$values>0
eigen(geninf(cbind(4,3.9,1,0.5)))$values>0
eigen(geninf(cbind(4,4,1,0.5)))$values>0
eigen(geninf(cbind(4,3.99,1,0.5)))$values>0
## Plot the matrix
eval=function(i,j){
r=exp(-0.05*sqrt(i^2+j^2))
return(r)
}
n=20
df=as.data.frame(matrix(0,n*n,3))
m=matrix(0,n^2,n^2)
count=0
for(i in 1:n){
for(j in 1:n){
count=count+1
df[count,1]=i
df[count,2]=j
#    df[count,3]=m[i,j]=eval(i,j)
}
}
for(i in 1:n^2){
for(j in 1:n^2){
h=abs(df[i,]-df[j,])
m[i,j]=eval(h[1],h[2])
}
}
eval=function(i,j){
r=exp(-0.05*sqrt(i^2+j^2))
return(r)
}
n=10
df=as.data.frame(matrix(0,n*n,3))
m=matrix(0,n^2,n^2)
count=0
for(i in 1:n){
for(j in 1:n){
count=count+1
df[count,1]=i
df[count,2]=j
#    df[count,3]=m[i,j]=eval(i,j)
}
}
for(i in 1:n^2){
for(j in 1:n^2){
h=abs(df[i,]-df[j,])
m[i,j]=eval(h[1],h[2])
}
}
image(t(m[n:1,] ), col=rainbow(100,start=0,end=1/6))
image(t(m[n:1,] ), col=rainbow(100,start=0,end=1/6))
image.plot(legend.only=T, zlim=range(m), col=rainbow(100,start=0,end=1/6), smallplot = c(0.85,0.9,0.3,0.5))
contour(t(m[n:1,]))
scatterplot3d(x = df[,1], y = df[,2], z = df[,3],type='h',angle=135)
library(scatterplot3d)
library(fields)
library(MASS)
image(t(m[n:1,] ), col=rainbow(100,start=0,end=1/6))
image.plot(legend.only=T, zlim=range(m), col=rainbow(100,start=0,end=1/6), smallplot = c(0.85,0.9,0.3,0.5))
contour(t(m[n:1,]))
scatterplot3d(x = df[,1], y = df[,2], z = df[,3],type='h',angle=135)
library(quantmod)
getSymbols("GOOG",src="yahoo",from="2016-01-01")
class(GOOG)
getFinancials("GOOG")
GOOG.f
viewFin(GOOG.f)
head(GOOG)
Op(GOOG)
Delt
library(devtools)
devtools::install_github("rstudio/bookdown")
n=1000
x1=rnorm(n)
x2=rnorm(n)
y1=rnorm(n)
y2=rnorm(n)
s=runif(n)
x=(s<0.5)*x1+(s>=0.5)*x2
y=(s<0.5)*y1+(s>=0.5)*y2
plot(x,y)
n=1000
x1=rnorm(n)
x2=rnorm(n,3)
y1=rnorm(n)
y2=rnorm(n,3)
s=runif(n)
x=(s<0.5)*x1+(s>=0.5)*x2
y=(s<0.5)*y1+(s>=0.5)*y2
plot(x,y)
n=1000
x1=rnorm(n)
x2=rnorm(n,5)
y1=rnorm(n)
y2=rnorm(n,5)
s=runif(n)
x=(s<0.5)*x1+(s>=0.5)*x2
y=(s<0.5)*y1+(s>=0.5)*y2
plot(x,y)
n=1000
x1=rnorm(n)
x2=rnorm(n,5)
y1=rnorm(n)
y2=rnorm(n,5)
s=runif(n)
x=(s<0.5)*x1+(s>=0.5)*x2
y=(s<0.5)*y1+(s>=0.5)*y2
plot(x,y)
u=rank(x)/(n+1)
v=rank(y)/(n+1)
plot(u,v)
n=1000
x1=rnorm(n)
x2=rnorm(n,3)
y1=rnorm(n)
y2=rnorm(n,3)
s=runif(n)
x=(s<0.5)*x1+(s>=0.5)*x2
y=(s<0.5)*y1+(s>=0.5)*y2
plot(x,y)
u=rank(x)/(n+1)
v=rank(y)/(n+1)
plot(u,v)
n=1000
x1=rnorm(n)
x2=rnorm(n,10)
y1=rnorm(n)
y2=rnorm(n,10)
s=runif(n)
x=(s<0.5)*x1+(s>=0.5)*x2
y=(s<0.5)*y1+(s>=0.5)*y2
plot(x,y)
u=rank(x)/(n+1)
v=rank(y)/(n+1)
plot(u,v)
install.packages("clim.pact")
install.packages("~/Desktop/clim.pact_2.3-10.tar.gz", repos = NULL, type = "source")
install.packages("~/Desktop/ncdf_1.6.9.tar.gz", repos = NULL, type = "source")
install.packages("~/Desktop/ncdf_1.6.tar.gz", repos = NULL, type = "source")
install.packages("ncdf4")
install.packages("~/Desktop/ncdf_1.6.8.tar.gz", repos = NULL, type = "source")
install.packages("~/Desktop/ncdf_1.6.7.tar.gz", repos = NULL, type = "source")
install.packages("~/Desktop/ncdf_1.6.6.tar.gz", repos = NULL, type = "source")
install.packages("~/Desktop/ncdf_1.6.5.tar.gz", repos = NULL, type = "source")
install.packages("~/Desktop/ncdf_1.6.5.tar.gz", repos = NULL, type = "source")
install.packages("~/Desktop/ncdf_1.6.3.tar.gz", repos = NULL, type = "source")
install.packages("~/Desktop/ncdf_1.6.2.tar.gz", repos = NULL, type = "source")
install.packages("~/Desktop/ncdf_1.5.tar.gz", repos = NULL, type = "source")
install.packages("~/Desktop/ncdf_1.4.tar.gz", repos = NULL, type = "source")
install.packages("~/Desktop/ncdf_1.0.tar.gz", repos = NULL, type = "source")
install.packages("~/Desktop/ncdf4_1.13.tar.gz", repos = NULL, type = "source")
install.packages("~/Desktop/clim.pact_2.3-7.tar.gz", repos = NULL, type = "source")
library("bookdown")
library('devtools')
install_github('metno/esd')
library("zoo", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.2")
install.packages('ncdf4')
install.packages('ncdf')
install_github('metno/esd')
install.packages('ncdf4')
library(esd)
packageVersion("esd")
library("esd")
install.packages("rvest")
install.packages("selectr")
library(devtools)
install_github("hadley/rvest")
install.packages("selectr")
install.packages("stringi")
install.packages("selectr")
install.packages("rvest")
library(rvest)
lego_movie <- read_html("http://www.imdb.com/title/tt1490017/")
lego_movie
lego_movie[1]
lego_movie[2]
lego_movie[[1]]
str(lego_movie)
lego_movie$node
rating <- lego_movie %>%
html_nodes("strong span")
rating
class(rating)
rating <- lego_movie %>%
html_nodes("strong span") %>%
html_text()
rating
class(rating)
poster <- lego_movie %>%
html_nodes("#img_primary img") %>%
html_attr("src")
poster
poster
h1=read_html("http://waterdata.usgs.gov/nwis/rt")
h1
node(h1)
h1 %>%
html_nodes("strong span") %>%
html_text() %>%
as.numeric()
h1[1]
html_node(h1)
h1 %>% html_node("rtnavbarcol")
h1 %>% html_nodes("rtnavbarcol")
h1 %>% html_nodes("rtnavbarcol") %>% html_text()
h1 %>% html_nodes(".rtnavbarcol") %>% html_text()
x=h1 %>% html_nodes(".rtnavbarcol") %>% html_text()
x
x[1]
x[2]
read-HTMLTable()
readHTMLTable()
install.packages(c('rzmq','repr','IRkernel','IRdisplay'),
repos = c('http://irkernel.github.io/', getOption('repos')))
setwd("~/Documents/esdcybersees")
#setwd("~/Documents/esdcybersees")
source('functions.R')
MON=1:365
names(MON)=c(rep("JAN",31),rep("FEB",28),rep("MAR",31),rep("APR",30),rep("MAY",31),rep("JUN",30),
rep("JUL",31),rep("AUG",31),rep("SEP",30),rep("OCT",31),rep("NOV",30),rep("DEC",31))
Mon=data.frame(mon=as.character(unique(names(MON))),num=1:12,days=c(31,28,31,30,31,30,31,31,30,31,30,31))
################## 1. Read in the GCM data(train) ##################
mylon=c(-116.25,-113.75)
mylat=c(43,45)
mon=1 # Month number: Jan=1
# 1.1 training
# http://nomads.gfdl.noaa.gov:8080/DataPortal/cmip5.jsp RCP6 & historical
# X1=get_gcm(-113.75+180,43); X2=get_gcm(-113.75+180,45); X3=get_gcm(-116.25+180,45);
X=get_gcm_train(mylon[1]+180,mylat[1]) # X=(X1+X2+X3+X4)/4 # kg/m^2/s = mm/hr *3600
colnames(X)=1975:2005; rownames(X)=1:365 # rm(X1,X2,X3,X4)
X=X[,5:29] * 3600 * 24 # mm # 365 days * 25 years # http://weather.unisys.com/wxp/wxp5/Users/units.lup
# 1.2 testing
X_test=get_gcm_test(mylon[1]+180,mylat[1])
colnames(X_test)=2006:2015; rownames(X_test)=1:365
X_test=X_test * 3600 * 24
################## 2. Read in the observation data(train) ##################
ncin = nc_open(paste0("./obs_in_grid/","obs_in_grid_",mylon[1],"-",mylat[1],".nc"))
lon = ncvar_get(ncin,"longitude")
lat = ncvar_get(ncin,"latitude")
t1=ncvar_get(ncin,"time")
Pr=ncvar_get(ncin,"precipitation") # 60*48*[365*37]
# 2.1 testing
t1_test=t1[-(1:(365*27))]
Pr_test=Pr[,,-(1:(365*27))]
# 2.2 training
t1=t1[1:(365*25)]
Pr=Pr[,,1:(365*25)]
############# Month-specific Data Manipulation #############
# GCM
Xi=X[MON[names(MON)==Mon[mon,1]],] # 31 days * 25 years
Xim=apply(Xi,2,sum) # 1 month * 25 years
# OBS
Pr1=Pr[,,is.element(t1,MON[names(MON)==Mon[mon,1]])]
Yi=matrix(apply(Pr1,3,mean),Mon[mon,3],25); colnames(Yi)=1979:2003
Yim=apply(Yi,2,sum)
Xi_test=X_test[MON[names(MON)==Mon[mon,1]],]
Xim_test=apply(Xi_test,2,sum)
Pr1_test=Pr_test[,,is.element(t1_test,MON[names(MON)==Mon[mon,1]])]
Yi_test=matrix(apply(Pr1_test,3,mean),Mon[mon,3],10); colnames(Yi_test)=2006:2015
Yim_test=apply(Yi_test,2,sum)
# Y=read.csv("obs_avg.csv",header = F); Y=t(Y); colnames(Y)=1979:2003; rownames(Y)=1:365
# Yi=Y[MON[names(MON)=="JAN"],] # 31 days * 25 years
# Yim=apply(Yi,2,sum) # 1 month * 25 years
################## 3-1 Quantile Mapping ##################
# training
Qi=quantile(Yim,ecdf(Xim)(Xim))
# testing
# Xim_test=Xim
Qi_test=quantile(Yim,ecdf(Xim)(Xim_test))
################## 3-2 Copula ##################
Ci=Xim
for(i in 1:length(Xim)){
Ci[i]=max_cond(Xim[i],Xim,Yim)
}
# testing
Ci_test=Xim_test
for(i in 1:length(Xim_test)){
Ci_test[i]=max_cond(Xim_test[i],Xim,Yim)
}
################## 4. Spatial disaggregation ##################
rmse1=rmse2=rmse3=rep(0,10)
for(k in 1:10){
T1=apply(Pr1_test[,,(1:Mon[mon,3])+(k-1)*Mon[mon,3]],c(1,2),sum) # Test truth (not available in real case) (for a given year)
M=apply(Pr1,c(1,2),sum)/25 # Local Historical Monthly (accumulation) mean
D1=Ci_test[k]*M/mean(Ci) #Copula; Downscale 1979 Jan, actually apply to training data (which need to try in testing data)
D2=Qi_test[k]*M/mean(Qi) #QM Downscale 1979 Jan, actually apply to training data (which need to try in testing data)
D3=Xim_test[k]*M/mean(Xim) #GCM
rmse1[k]=sqrt(mean((D1-T1)^2))
rmse2[k]=sqrt(mean((D2-T1)^2))
rmse3[k]=sqrt(mean((D3-T1)^2))
}
plot(2006:2015,rmse1,col="black",type="o",ylim = c(0,max(c(rmse1,rmse2,rmse3))),ylab="RMSE",
main=paste("Downscaling on Testing Set in",Mon[mon,1]))
lines(2006:2015,rmse2,col="blue",type="o")
lines(2006:2015,rmse3,col="red",type="o")
legend("top",c("Nonparametric Copula","Quantile Mapping","GCM"),lty=1,pch=1,col=c("black","blue","red"),cex=0.5)
mean(rmse1<rmse2)
sqrt(mean((Yim_test-Xim_test)^2))
sqrt(mean((Yim_test-Qi_test)^2))
sqrt(mean((Yim_test-Ci_test)^2))
# 5.1 Quantile Mapping
# plot(ecdf(Z)); plot(ecdf(Xim)); plot(ecdf(Yim))
plot(sort(Xim),rank(sort(Xim))/length(Xim),type="o",xlim=c(0,max(Yim)),xlab="Preicipitation",ylab="ECDF",
main="Quantile Mapping (Monthly accumulation, 1979 - 2003)",col="blue")
lines(sort(Yim),rank(sort(Yim))/length(Yim),type="o",col="red")
legend("bottomright",c("GCM","Obs"),lty=1,pch=1,col=c("blue","red"))
# 5.2 Bias Correction
plot(1979:2003,Xim,type="o",ylim=c(0,max(Yim)),col="blue",xlab="Years",ylab="Precipitation(mm)",main="Bias Correction")
lines(1979:2003,Yim,type="o",col="red")
lines(1979:2003,Qi,type="o",col="green")
lines(1979:2003,Ci,type="o",col="black")
legend("top",c("GCM","Obs","Quantile Mapping","Nonparametric Copula"),lty=1,pch=1,col=c("blue","red","green","black"))
