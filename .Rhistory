err=rep(0,length(Ss))
for(i in 1:length(Ss)){
m=genm(N)
X= mvrnorm(n=Ss[i],rep(0,N),m)
err[i]=norm(m-cov(X),type="2")
}
plot(Ss,err,xlab="Sample size",ylab="spectral norm of error(Sample-True)")
plot(Ss,err,xlab="Sample size",ylab="spectral norm of error(Sample-True)",main="dimension is 1000")
x=runif(1000)
y=x^2
cor(x,y)
y=(x-0.5)^2
cor(x,y)
cov(x,y)
geninf=function(a){
n=length(a)
M=matrix(0,n,n)
for(i in 1:n){
for(j in 1:n){
M[i,j]=a[max(i,j)]
}
}
return(M)
}
geninf(c(1,2,3))
eig(geninf(1:3))
eigen(geninf(1:3))
eigen(geninf(1:5))
eigen(geninf(5:1))
eigen(geninf(4:1))
eigen(geninf(10:1))
eval=function(i,j){
r=exp(-0.05*sqrt(i^2+j^2))
return(r)
}
genm=function(N){
M=matrix(0,N,N)
for(i in 1:N){
for(j in 1:N){
M[i,j]=eval(i,j)
}
}
return(M)
}
genm(5)
eigen(genm(5))
eigen(genm(6))
eigen(genm(7))
eigen(genm(7))$values>0
eigen(genm(8))$values>0
eigen(genm(9))$values>0
eigen(genm(10))$values>0
eigen(geninf(4:1))$values>0
eigen(geninf(cbind(4,2,1,0.5)))$values>0
eigen(geninf(cbind(4,3.9,1,0.5)))$values>0
eigen(geninf(cbind(4,4,1,0.5)))$values>0
eigen(geninf(cbind(4,3.99,1,0.5)))$values>0
## Plot the matrix
eval=function(i,j){
r=exp(-0.05*sqrt(i^2+j^2))
return(r)
}
n=20
df=as.data.frame(matrix(0,n*n,3))
m=matrix(0,n^2,n^2)
count=0
for(i in 1:n){
for(j in 1:n){
count=count+1
df[count,1]=i
df[count,2]=j
#    df[count,3]=m[i,j]=eval(i,j)
}
}
for(i in 1:n^2){
for(j in 1:n^2){
h=abs(df[i,]-df[j,])
m[i,j]=eval(h[1],h[2])
}
}
eval=function(i,j){
r=exp(-0.05*sqrt(i^2+j^2))
return(r)
}
n=10
df=as.data.frame(matrix(0,n*n,3))
m=matrix(0,n^2,n^2)
count=0
for(i in 1:n){
for(j in 1:n){
count=count+1
df[count,1]=i
df[count,2]=j
#    df[count,3]=m[i,j]=eval(i,j)
}
}
for(i in 1:n^2){
for(j in 1:n^2){
h=abs(df[i,]-df[j,])
m[i,j]=eval(h[1],h[2])
}
}
image(t(m[n:1,] ), col=rainbow(100,start=0,end=1/6))
image(t(m[n:1,] ), col=rainbow(100,start=0,end=1/6))
image.plot(legend.only=T, zlim=range(m), col=rainbow(100,start=0,end=1/6), smallplot = c(0.85,0.9,0.3,0.5))
contour(t(m[n:1,]))
scatterplot3d(x = df[,1], y = df[,2], z = df[,3],type='h',angle=135)
library(scatterplot3d)
library(fields)
library(MASS)
image(t(m[n:1,] ), col=rainbow(100,start=0,end=1/6))
image.plot(legend.only=T, zlim=range(m), col=rainbow(100,start=0,end=1/6), smallplot = c(0.85,0.9,0.3,0.5))
contour(t(m[n:1,]))
scatterplot3d(x = df[,1], y = df[,2], z = df[,3],type='h',angle=135)
library(quantmod)
getSymbols("GOOG",src="yahoo",from="2016-01-01")
class(GOOG)
getFinancials("GOOG")
GOOG.f
viewFin(GOOG.f)
head(GOOG)
Op(GOOG)
Delt
library(devtools)
devtools::install_github("rstudio/bookdown")
n=1000
x1=rnorm(n)
x2=rnorm(n)
y1=rnorm(n)
y2=rnorm(n)
s=runif(n)
x=(s<0.5)*x1+(s>=0.5)*x2
y=(s<0.5)*y1+(s>=0.5)*y2
plot(x,y)
n=1000
x1=rnorm(n)
x2=rnorm(n,3)
y1=rnorm(n)
y2=rnorm(n,3)
s=runif(n)
x=(s<0.5)*x1+(s>=0.5)*x2
y=(s<0.5)*y1+(s>=0.5)*y2
plot(x,y)
n=1000
x1=rnorm(n)
x2=rnorm(n,5)
y1=rnorm(n)
y2=rnorm(n,5)
s=runif(n)
x=(s<0.5)*x1+(s>=0.5)*x2
y=(s<0.5)*y1+(s>=0.5)*y2
plot(x,y)
n=1000
x1=rnorm(n)
x2=rnorm(n,5)
y1=rnorm(n)
y2=rnorm(n,5)
s=runif(n)
x=(s<0.5)*x1+(s>=0.5)*x2
y=(s<0.5)*y1+(s>=0.5)*y2
plot(x,y)
u=rank(x)/(n+1)
v=rank(y)/(n+1)
plot(u,v)
n=1000
x1=rnorm(n)
x2=rnorm(n,3)
y1=rnorm(n)
y2=rnorm(n,3)
s=runif(n)
x=(s<0.5)*x1+(s>=0.5)*x2
y=(s<0.5)*y1+(s>=0.5)*y2
plot(x,y)
u=rank(x)/(n+1)
v=rank(y)/(n+1)
plot(u,v)
n=1000
x1=rnorm(n)
x2=rnorm(n,10)
y1=rnorm(n)
y2=rnorm(n,10)
s=runif(n)
x=(s<0.5)*x1+(s>=0.5)*x2
y=(s<0.5)*y1+(s>=0.5)*y2
plot(x,y)
u=rank(x)/(n+1)
v=rank(y)/(n+1)
plot(u,v)
install.packages("clim.pact")
install.packages("~/Desktop/clim.pact_2.3-10.tar.gz", repos = NULL, type = "source")
install.packages("~/Desktop/ncdf_1.6.9.tar.gz", repos = NULL, type = "source")
install.packages("~/Desktop/ncdf_1.6.tar.gz", repos = NULL, type = "source")
install.packages("ncdf4")
install.packages("~/Desktop/ncdf_1.6.8.tar.gz", repos = NULL, type = "source")
install.packages("~/Desktop/ncdf_1.6.7.tar.gz", repos = NULL, type = "source")
install.packages("~/Desktop/ncdf_1.6.6.tar.gz", repos = NULL, type = "source")
install.packages("~/Desktop/ncdf_1.6.5.tar.gz", repos = NULL, type = "source")
install.packages("~/Desktop/ncdf_1.6.5.tar.gz", repos = NULL, type = "source")
install.packages("~/Desktop/ncdf_1.6.3.tar.gz", repos = NULL, type = "source")
install.packages("~/Desktop/ncdf_1.6.2.tar.gz", repos = NULL, type = "source")
install.packages("~/Desktop/ncdf_1.5.tar.gz", repos = NULL, type = "source")
install.packages("~/Desktop/ncdf_1.4.tar.gz", repos = NULL, type = "source")
install.packages("~/Desktop/ncdf_1.0.tar.gz", repos = NULL, type = "source")
install.packages("~/Desktop/ncdf4_1.13.tar.gz", repos = NULL, type = "source")
install.packages("~/Desktop/clim.pact_2.3-7.tar.gz", repos = NULL, type = "source")
library("bookdown")
library('devtools')
install_github('metno/esd')
library("zoo", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.2")
install.packages('ncdf4')
install.packages('ncdf')
install_github('metno/esd')
install.packages('ncdf4')
library(esd)
packageVersion("esd")
library("esd")
install.packages("rvest")
install.packages("selectr")
library(devtools)
install_github("hadley/rvest")
install.packages("selectr")
install.packages("stringi")
install.packages("selectr")
install.packages("rvest")
library(rvest)
lego_movie <- read_html("http://www.imdb.com/title/tt1490017/")
lego_movie
lego_movie[1]
lego_movie[2]
lego_movie[[1]]
str(lego_movie)
lego_movie$node
rating <- lego_movie %>%
html_nodes("strong span")
rating
class(rating)
rating <- lego_movie %>%
html_nodes("strong span") %>%
html_text()
rating
class(rating)
poster <- lego_movie %>%
html_nodes("#img_primary img") %>%
html_attr("src")
poster
poster
h1=read_html("http://waterdata.usgs.gov/nwis/rt")
h1
node(h1)
h1 %>%
html_nodes("strong span") %>%
html_text() %>%
as.numeric()
h1[1]
html_node(h1)
h1 %>% html_node("rtnavbarcol")
h1 %>% html_nodes("rtnavbarcol")
h1 %>% html_nodes("rtnavbarcol") %>% html_text()
h1 %>% html_nodes(".rtnavbarcol") %>% html_text()
x=h1 %>% html_nodes(".rtnavbarcol") %>% html_text()
x
x[1]
x[2]
read-HTMLTable()
readHTMLTable()
install.packages(c('rzmq','repr','IRkernel','IRdisplay'),
repos = c('http://irkernel.github.io/', getOption('repos')))
library(ncdf4)
# 1. Read in the GCM data
MON=1:365
names(MON)=c(rep("JAN",31),rep("FEB",28),rep("MAR",31),rep("APR",30),rep("MAY",31),rep("JUN",30),rep("JUL",31),rep("AUG",31),rep("SEP",30),rep("OCT",31),rep("NOV",30),rep("DEC",31))
get_gcm=function(mylon,mylat){
cat("In position: ",mylon,mylat,"\n")
files=list.files("./gcm")
pr=NULL
for(i in files){
cat("Read in file ",i,"\n")
ncin = nc_open(paste0("./gcm/",i))
lon = ncvar_get(ncin,"lon")
lat = ncvar_get(ncin,"lat")
Pr=ncvar_get(ncin,"pr")
pr=c(pr,Pr[((mylon-0.1)<lon)&(lon<(mylon+0.1)),((mylat-0.1)<lat)&(lat<(mylat+0.1)),])
}
prm=matrix(pr,365,length(pr)/365)
return(prm)
}
X4=get_gcm(-116.25+180,43)
setwd("~/Documents/esd")
X4=get_gcm(-116.25+180,43)
X=X4
#rm(X1,X2,X3,X4)
colnames(X)=1975:2005
rownames(X)=1:365
X=X[,5:29] * 3600 * 24 # mm # 365 days * 25 years
#http://weather.unisys.com/wxp/wxp5/Users/units.lup
Xi=X[MON[names(MON)=="JAN"],] # 31 days * 25 years
Xim=apply(Xi,2,sum) # 1 month * 25 years
#Y=get_obs(mylon,mylat)
Y=read.csv("obs_avg.csv",header = F)
colnames(Y)=1979:2003
rownames(Y)=1:365
Yi=Y[MON[names(MON)=="JAN"],] # 31 days * 25 years
Yim=apply(Yi,2,sum) # 1 month * 25 years
Z=quantile(Yim,ecdf(Xim)(Xim))
plot(rank(Xim)/366,rank(Yim)/366)
rank(Xim)
plot(rank(Xim)/25,rank(Yim)/25)
density(Xim)
plot(density(Xim))
hist(Xim)
hde2d
kde2d
library(MASS)
density(Xim)
density(Xim)(0)
density(Xim)[0]
density(Xim)(1)
density(Xim)
density(Xim,0)
density(Xim,1)
density(Xim)
density$x
density(Xim)$x
Xim
density(Xim)$3.5
density(Xim)$y
density
x0=2
density(Xim, from=x0, to=x0, n=1)$y
density(Xim, from=x0, to=x0, n=1)$x
kde2d(Xim,Yim)
plot(kde2d(Xim,Yim))
image(kde2d(Xim,Yim))
image(kde2d(rank(Xim)/25,rank(Yim)/25))
f2=kde2d(rank(Xim)/25,rank(Yim)/25)
image(f2)
persp(f2, phi = 30, theta = 20, d = 5)
persp(f2)
persp(f2, phi = 30, theta = 20, d = 5)
contour(f2)
plot(rank(Xim)/25,rank(Yim)/25)
kde2d(rank(Xim)/25,rank(Yim)/25,xlim=c(0.5,0.5),ylim=c(0.3,0.3),n=1)
kde2d(rank(Xim)/25,rank(Yim)/25,lims=c(0.5,0.5,0.3,0.3),n=1)
seq(3,5,10)
seq(from=3,to=5,n=10)
seq(10,from=3,to=5)
?seq
seq(length=10,from=3,to=5)
rank(c(2,45,10,20))
rank(c(2,45,10,20))[1]
kde1d_point=function(x0,x_given){
density(x_given, from=x0, to=x0, n=1)$y
}
kde2d_point=function(x0,y0,x_given,y_given){
kde2d(x_given,y_given,lims=c(x0,x0,y0,y0),n=1)
}
max_cond=function(x_fix,x_given,y_given){
ygrid=seq(from=min(y),to=max(y),length=1000)
yt=ygrid
u=rank(x_given)/25
v=rank(y_given)/25
for(i in 1:length(ygrid)){
yt[i]=kde2d_point(rank(c(x_fix,x_given))[1]/26,rank(c(ygrid[i],y_given))[1]/26,u,v)*kde1d_point(x_fix,x_given)
}
max(yt)
}
max_cond(40,Xim,Yim)
max_cond=function(x_fix,x_given,y_given){
ygrid=seq(from=min(y_given),to=max(y_given),length=1000)
yt=ygrid
u=rank(x_given)/25
v=rank(y_given)/25
for(i in 1:length(ygrid)){
yt[i]=kde2d_point(rank(c(x_fix,x_given))[1]/26,rank(c(ygrid[i],y_given))[1]/26,u,v)*kde1d_point(x_fix,x_given)
}
max(yt)
}
max_cond(40,Xim,Yim)
x_fix=40
x_given=Xim
y_given=Yim
ygrid=seq(from=min(y_given),to=max(y_given),length=1000)
yt=ygrid
u=rank(x_given)/25
v=rank(y_given)/25
rank(c(x_fix,x_given))[1]/26
rank(c(ygrid[i],y_given))[1]/26
1:length(ygrid)
i=1
rank(c(ygrid[i],y_given))[1]/26
max_cond=function(x_fix,x_given,y_given){
ygrid=seq(from=min(y_given),to=max(y_given),length=1000)
yt=ygrid
u=rank(x_given)/25
v=rank(y_given)/25
for(i in 1:length(ygrid)){
yt[i]=kde2d_point(rank(c(x_fix,x_given))[1]/26,rank(c(ygrid[i],y_given))[1]/26,u,v)*kde1d_point(x_fix,x_given)
}
max(yt)
}
max_cond(40,Xim,Yim)
kde2d_point(rank(c(x_fix,x_given))[1]/26,rank(c(ygrid[i],y_given))[1]/26,u,v)
kde1d_point(x_fix,x_given)
kde2d_point(rank(c(x_fix,x_given))[1]/26,rank(c(ygrid[i],y_given))[1]/26,u,v)*kde1d_point(x_fix,x_given)
kde1d_point=function(x0,x_given){
density(x_given, from=x0, to=x0, n=1)$y
}
kde2d_point=function(x0,y0,x_given,y_given){
kde2d(x_given,y_given,lims=c(x0,x0,y0,y0),n=1)$z
}
max_cond=function(x_fix,x_given,y_given){
ygrid=seq(from=min(y_given),to=max(y_given),length=1000)
yt=ygrid
u=rank(x_given)/25
v=rank(y_given)/25
for(i in 1:length(ygrid)){
yt[i]=kde2d_point(rank(c(x_fix,x_given))[1]/26,rank(c(ygrid[i],y_given))[1]/26,u,v)*kde1d_point(x_fix,x_given)
}
max(yt)
}
max_cond(40,Xim,Yim)
Xim
max_cond(30,Xim,Yim)
max_cond(20,Xim,Yim)
max_cond=function(x_fix,x_given,y_given){
ygrid=seq(from=min(y_given),to=max(y_given),length=1000)
yt=ygrid
u=rank(x_given)/25
v=rank(y_given)/25
for(i in 1:length(ygrid)){
yt[i]=kde2d_point(rank(c(x_fix,x_given))[1]/26,rank(c(ygrid[i],y_given))[1]/26,u,v)*kde1d_point(x_fix,x_given)
}
ygrid[yt=max(yt)]
}
max_cond(20,Xim,Yim)
max_cond(30,Xim,Yim)
max_cond=function(x_fix,x_given,y_given){
ygrid=seq(from=min(y_given),to=max(y_given),length=1000)
yt=ygrid
u=rank(x_given)/25
v=rank(y_given)/25
for(i in 1:length(ygrid)){
yt[i]=kde2d_point(rank(c(x_fix,x_given))[1]/26,rank(c(ygrid[i],y_given))[1]/26,u,v)*kde1d_point(x_fix,x_given)
}
ygrid[yt==max(yt)]
}
max_cond(30,Xim,Yim)
ygrid=seq(from=min(y_given),to=max(y_given),length=1000)
yt=ygrid
u=rank(x_given)/25
v=rank(y_given)/25
for(i in 1:length(ygrid)){
yt[i]=kde2d_point(rank(c(x_fix,x_given))[1]/26,rank(c(ygrid[i],y_given))[1]/26,u,v)*kde1d_point(x_fix,x_given)
}
yt
plot(ygrid,yt)
max_cond=function(x_fix,x_given,y_given){
ygrid=seq(from=min(y_given),to=max(y_given),length=100)
yt=ygrid
u=rank(x_given)/25
v=rank(y_given)/25
for(i in 1:length(ygrid)){
yt[i]=kde2d_point(rank(c(x_fix,x_given))[1]/26,rank(c(ygrid[i],y_given))[1]/26,u,v)*kde1d_point(x_fix,x_given)
}
plot(ygrid,yt)
ygrid[yt==max(yt)]
}
ygrid=seq(from=min(y_given),to=max(y_given),length=100)
yt=ygrid
u=rank(x_given)/25
v=rank(y_given)/25
for(i in 1:length(ygrid)){
yt[i]=kde2d_point(rank(c(x_fix,x_given))[1]/26,rank(c(ygrid[i],y_given))[1]/26,u,v)*kde1d_point(x_fix,x_given)
}
plot(ygrid,yt)
ygrid[yt==max(yt)]
plot(ygrid,yt,type="o")
ygrid=seq(from=min(y_given),to=max(y_given),length=1000)
yt=ygrid
u=rank(x_given)/25
v=rank(y_given)/25
for(i in 1:length(ygrid)){
yt[i]=kde2d_point(rank(c(x_fix,x_given))[1]/26,rank(c(ygrid[i],y_given))[1]/26,u,v)*kde1d_point(x_fix,x_given)
}
plot(ygrid,yt,type="o")
ygrid[yt==max(yt)]
which.max(yt)
ygrid[which.max(yt)]
max_cond=function(x_fix,x_given,y_given){
ygrid=seq(from=min(y_given),to=max(y_given),length=100)
yt=ygrid
u=rank(x_given)/25
v=rank(y_given)/25
for(i in 1:length(ygrid)){
yt[i]=kde2d_point(rank(c(x_fix,x_given))[1]/26,rank(c(ygrid[i],y_given))[1]/26,u,v)*kde1d_point(x_fix,x_given)
}
#plot(ygrid,yt,type="o")
#ygrid[yt==max(yt)]
ygrid[which.max(yt)]
}
Xim2=Xim
for(i in 1:length(Xim)){
Xim2[i]=max_cond(Xim[i],Xim,Yim)
}
plot(1979:2003,Xim,type="o",ylim=c(0,max(Yim)))
lines(1979:2003,Yim,type="o",col="red")
lines(1979:2003,Z,type="o",col="blue")
lines(1979:2003,Xim2,type="o",col="green")
mean((Yim-Z)^2)
mean((Yim-Xim2)^2)
sqrt(mean((Yim-Z)^2))
sqrt(mean((Yim-Xim2)^2))
