err[i]=norm(m-cov(X),type="2")
}
plot(Ns,err,xlab="matrix size",ylab="spectral norm of error(\hat{\Sigma}-\Sigma)")
plot(Ns,err,xlab="matrix size",ylab="spectral norm of error(\Sigma hat-\Sigma)")
plot(Ns,err,xlab="matrix size",ylab="spectral norm of error(Sample Covariance-True Covariance)")
plot(Ns,err,xlab="matrix size",ylab="spectral norm of error(Sample-True)")
Ns=(1:10)*50
err=rep(0,length(Ns))
for(i in 1:length(Ns)){
m=matrix(0,Ns[i],Ns[i])
m=genm(m)
X= mvrnorm(n=1000,rep(0,Ns[i]),m)
err[i]=norm(m-cov(X),type="2")
}
plot(Ns,err,xlab="matrix size",ylab="spectral norm of error(Sample-True)")
N=1000
Ss=(1:10)*100
err=rep(0,length(Ss))
for(i in 1:length(Ss)){
m=matrix(0,N,N)
m=genm(m)
X= mvrnorm(n=Ss[i],rep(0,N),m)
err[i]=norm(m-cov(X),type="2")
}
plot(Ss,err,xlab="Sample size",ylab="spectral norm of error(Sample-True)")
genm=function(N){
M=matrix(0,N,N)
for(i in 1:N){
for(j in 1:N){
M[i,j]=eval(i,j)
}
}
return(M)
}
n=200
m=genm(n)
#norm(m,type="2")
#eigen(m)$values
plot(eigen(m)$values,main="Eigenvalues of M")
Ns=(1:10)*50
eigv=rep(0,length(Ns))
for(i in 1:length(Ns)){
m=genm(Ns[i])
eigv[i]=norm(m,type="2")
}
plot(Ns,eigv,xlab="matrix size",ylab="spectral norm")
Ns=(1:10)*20
eigv=rep(0,length(Ns))
for(i in 1:length(Ns)){
m=genm(Ns[i])
eigv[i]=norm(m,type="2")
}
plot(Ns,eigv,xlab="matrix size",ylab="spectral norm")
Ns=(1:10)*10
eigv=rep(0,length(Ns))
for(i in 1:length(Ns)){
m=genm(Ns[i])
eigv[i]=norm(m,type="2")
}
plot(Ns,eigv,xlab="matrix size",ylab="spectral norm")
n=10
m=genm(n)
X= mvrnorm(n=1000,rep(0,n),m)
norm(m-cov(X),type="2")
Ns=(1:10)*50
err=rep(0,length(Ns))
for(i in 1:length(Ns)){
m=genm(Ns[i])
X= mvrnorm(n=1000,rep(0,Ns[i]),m)
err[i]=norm(m-cov(X),type="2")
}
plot(Ns,err,xlab="matrix size",ylab="spectral norm of error(Sample-True)")
N=1000
Ss=(1:100)*10
err=rep(0,length(Ss))
for(i in 1:length(Ss)){
m=genm(N)
X= mvrnorm(n=Ss[i],rep(0,N),m)
err[i]=norm(m-cov(X),type="2")
}
plot(Ss,err,xlab="Sample size",ylab="spectral norm of error(Sample-True)")
plot(Ss,err,xlab="Sample size",ylab="spectral norm of error(Sample-True)",main="dimension is 1000")
x=runif(1000)
y=x^2
cor(x,y)
y=(x-0.5)^2
cor(x,y)
cov(x,y)
geninf=function(a){
n=length(a)
M=matrix(0,n,n)
for(i in 1:n){
for(j in 1:n){
M[i,j]=a[max(i,j)]
}
}
return(M)
}
geninf(c(1,2,3))
eig(geninf(1:3))
eigen(geninf(1:3))
eigen(geninf(1:5))
eigen(geninf(5:1))
eigen(geninf(4:1))
eigen(geninf(10:1))
eval=function(i,j){
r=exp(-0.05*sqrt(i^2+j^2))
return(r)
}
genm=function(N){
M=matrix(0,N,N)
for(i in 1:N){
for(j in 1:N){
M[i,j]=eval(i,j)
}
}
return(M)
}
genm(5)
eigen(genm(5))
eigen(genm(6))
eigen(genm(7))
eigen(genm(7))$values>0
eigen(genm(8))$values>0
eigen(genm(9))$values>0
eigen(genm(10))$values>0
eigen(geninf(4:1))$values>0
eigen(geninf(cbind(4,2,1,0.5)))$values>0
eigen(geninf(cbind(4,3.9,1,0.5)))$values>0
eigen(geninf(cbind(4,4,1,0.5)))$values>0
eigen(geninf(cbind(4,3.99,1,0.5)))$values>0
## Plot the matrix
eval=function(i,j){
r=exp(-0.05*sqrt(i^2+j^2))
return(r)
}
n=20
df=as.data.frame(matrix(0,n*n,3))
m=matrix(0,n^2,n^2)
count=0
for(i in 1:n){
for(j in 1:n){
count=count+1
df[count,1]=i
df[count,2]=j
#    df[count,3]=m[i,j]=eval(i,j)
}
}
for(i in 1:n^2){
for(j in 1:n^2){
h=abs(df[i,]-df[j,])
m[i,j]=eval(h[1],h[2])
}
}
eval=function(i,j){
r=exp(-0.05*sqrt(i^2+j^2))
return(r)
}
n=10
df=as.data.frame(matrix(0,n*n,3))
m=matrix(0,n^2,n^2)
count=0
for(i in 1:n){
for(j in 1:n){
count=count+1
df[count,1]=i
df[count,2]=j
#    df[count,3]=m[i,j]=eval(i,j)
}
}
for(i in 1:n^2){
for(j in 1:n^2){
h=abs(df[i,]-df[j,])
m[i,j]=eval(h[1],h[2])
}
}
image(t(m[n:1,] ), col=rainbow(100,start=0,end=1/6))
image(t(m[n:1,] ), col=rainbow(100,start=0,end=1/6))
image.plot(legend.only=T, zlim=range(m), col=rainbow(100,start=0,end=1/6), smallplot = c(0.85,0.9,0.3,0.5))
contour(t(m[n:1,]))
scatterplot3d(x = df[,1], y = df[,2], z = df[,3],type='h',angle=135)
library(scatterplot3d)
library(fields)
library(MASS)
image(t(m[n:1,] ), col=rainbow(100,start=0,end=1/6))
image.plot(legend.only=T, zlim=range(m), col=rainbow(100,start=0,end=1/6), smallplot = c(0.85,0.9,0.3,0.5))
contour(t(m[n:1,]))
scatterplot3d(x = df[,1], y = df[,2], z = df[,3],type='h',angle=135)
library(quantmod)
getSymbols("GOOG",src="yahoo",from="2016-01-01")
class(GOOG)
getFinancials("GOOG")
GOOG.f
viewFin(GOOG.f)
head(GOOG)
Op(GOOG)
Delt
library(devtools)
devtools::install_github("rstudio/bookdown")
n=1000
x1=rnorm(n)
x2=rnorm(n)
y1=rnorm(n)
y2=rnorm(n)
s=runif(n)
x=(s<0.5)*x1+(s>=0.5)*x2
y=(s<0.5)*y1+(s>=0.5)*y2
plot(x,y)
n=1000
x1=rnorm(n)
x2=rnorm(n,3)
y1=rnorm(n)
y2=rnorm(n,3)
s=runif(n)
x=(s<0.5)*x1+(s>=0.5)*x2
y=(s<0.5)*y1+(s>=0.5)*y2
plot(x,y)
n=1000
x1=rnorm(n)
x2=rnorm(n,5)
y1=rnorm(n)
y2=rnorm(n,5)
s=runif(n)
x=(s<0.5)*x1+(s>=0.5)*x2
y=(s<0.5)*y1+(s>=0.5)*y2
plot(x,y)
n=1000
x1=rnorm(n)
x2=rnorm(n,5)
y1=rnorm(n)
y2=rnorm(n,5)
s=runif(n)
x=(s<0.5)*x1+(s>=0.5)*x2
y=(s<0.5)*y1+(s>=0.5)*y2
plot(x,y)
u=rank(x)/(n+1)
v=rank(y)/(n+1)
plot(u,v)
n=1000
x1=rnorm(n)
x2=rnorm(n,3)
y1=rnorm(n)
y2=rnorm(n,3)
s=runif(n)
x=(s<0.5)*x1+(s>=0.5)*x2
y=(s<0.5)*y1+(s>=0.5)*y2
plot(x,y)
u=rank(x)/(n+1)
v=rank(y)/(n+1)
plot(u,v)
n=1000
x1=rnorm(n)
x2=rnorm(n,10)
y1=rnorm(n)
y2=rnorm(n,10)
s=runif(n)
x=(s<0.5)*x1+(s>=0.5)*x2
y=(s<0.5)*y1+(s>=0.5)*y2
plot(x,y)
u=rank(x)/(n+1)
v=rank(y)/(n+1)
plot(u,v)
install.packages("clim.pact")
install.packages("~/Desktop/clim.pact_2.3-10.tar.gz", repos = NULL, type = "source")
install.packages("~/Desktop/ncdf_1.6.9.tar.gz", repos = NULL, type = "source")
install.packages("~/Desktop/ncdf_1.6.tar.gz", repos = NULL, type = "source")
install.packages("ncdf4")
install.packages("~/Desktop/ncdf_1.6.8.tar.gz", repos = NULL, type = "source")
install.packages("~/Desktop/ncdf_1.6.7.tar.gz", repos = NULL, type = "source")
install.packages("~/Desktop/ncdf_1.6.6.tar.gz", repos = NULL, type = "source")
install.packages("~/Desktop/ncdf_1.6.5.tar.gz", repos = NULL, type = "source")
install.packages("~/Desktop/ncdf_1.6.5.tar.gz", repos = NULL, type = "source")
install.packages("~/Desktop/ncdf_1.6.3.tar.gz", repos = NULL, type = "source")
install.packages("~/Desktop/ncdf_1.6.2.tar.gz", repos = NULL, type = "source")
install.packages("~/Desktop/ncdf_1.5.tar.gz", repos = NULL, type = "source")
install.packages("~/Desktop/ncdf_1.4.tar.gz", repos = NULL, type = "source")
install.packages("~/Desktop/ncdf_1.0.tar.gz", repos = NULL, type = "source")
install.packages("~/Desktop/ncdf4_1.13.tar.gz", repos = NULL, type = "source")
install.packages("~/Desktop/clim.pact_2.3-7.tar.gz", repos = NULL, type = "source")
library("bookdown")
library('devtools')
install_github('metno/esd')
library("zoo", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.2")
install.packages('ncdf4')
install.packages('ncdf')
install_github('metno/esd')
install.packages('ncdf4')
library(esd)
packageVersion("esd")
library("esd")
install.packages("rvest")
install.packages("selectr")
library(devtools)
install_github("hadley/rvest")
install.packages("selectr")
install.packages("stringi")
install.packages("selectr")
install.packages("rvest")
library(rvest)
lego_movie <- read_html("http://www.imdb.com/title/tt1490017/")
lego_movie
lego_movie[1]
lego_movie[2]
lego_movie[[1]]
str(lego_movie)
lego_movie$node
rating <- lego_movie %>%
html_nodes("strong span")
rating
class(rating)
rating <- lego_movie %>%
html_nodes("strong span") %>%
html_text()
rating
class(rating)
poster <- lego_movie %>%
html_nodes("#img_primary img") %>%
html_attr("src")
poster
poster
h1=read_html("http://waterdata.usgs.gov/nwis/rt")
h1
node(h1)
h1 %>%
html_nodes("strong span") %>%
html_text() %>%
as.numeric()
h1[1]
html_node(h1)
h1 %>% html_node("rtnavbarcol")
h1 %>% html_nodes("rtnavbarcol")
h1 %>% html_nodes("rtnavbarcol") %>% html_text()
h1 %>% html_nodes(".rtnavbarcol") %>% html_text()
x=h1 %>% html_nodes(".rtnavbarcol") %>% html_text()
x
x[1]
x[2]
read-HTMLTable()
readHTMLTable()
install.packages(c('rzmq','repr','IRkernel','IRdisplay'),
repos = c('http://irkernel.github.io/', getOption('repos')))
rcd2=function(x,y,bandwidth){
# R code for bivariate kde with quad
n=length(x)
m=200
u=rank(x)/(n+1); v=rank(y)/(n+1)
h=bandwidth[1]; l=bandwidth[2]
A=matrix(0,m,m) #calculate the density on a m by m grid
#pos = seq(m)/(m+1) pos = (2*seq(m)+1)/(2*m)
for(k in 1:n){
ul=max(1,floor(m*(u[k]-h)))
uu=min(m,floor(m*(u[k]+h)))
vl=max(1,floor(m*(v[k]-l)))
vu=min(m,floor(m*(v[k]+l)))
A[ul:uu,vl:vu]=A[ul:uu,vl:vu]+1
}
A=A/(n*h*l*4)
return(mean((A-1)^2))
}
rcd2(rnorm(1000),rnorm(1000))
rcd2(rnorm(1000),rnorm(1000),0.25*1000^(-1/4))
rcd2=function(x,y,bandwidth){
# R code for bivariate kde with quad
n=length(x)
m=200
u=rank(x)/(n+1); v=rank(y)/(n+1)
h=bandwidth[1]; l=h
A=matrix(0,m,m) #calculate the density on a m by m grid
#pos = seq(m)/(m+1) pos = (2*seq(m)+1)/(2*m)
for(k in 1:n){
ul=max(1,floor(m*(u[k]-h)))
uu=min(m,floor(m*(u[k]+h)))
vl=max(1,floor(m*(v[k]-l)))
vu=min(m,floor(m*(v[k]+l)))
A[ul:uu,vl:vu]=A[ul:uu,vl:vu]+1
}
A=A/(n*h*l*4)
return(mean((A-1)^2))
}
rcd2(rnorm(1000),rnorm(1000),0.25*1000^(-1/4))
x=rnorm(1000)
rcd2(x,x,0.25*1000^(-1/4))
rcd2(x,rnorm(1000),0.25*1000^(-1/4))
rcd2(x,x+rnorm(1000),0.25*1000^(-1/4))
rcd2(x,x+0.5*rnorm(1000),0.25*1000^(-1/4))
library("rcd")
n=1000
x=runif(n)
rcd(x,x)
rcd(x,x,density="knn")
rcd(x,x,density="knn")
rcd(x,x,density="kde")
rcd(x,x,density="knn")
x=runif(5000)
rcd(x,x,density="knn")
library(rbenchmark)
benchmark(rcd(x,x,density="knn"),replications = 1)
benchmark(rcd(x,x,density="knn"),replications = 1)
library(RcppParallel)
defaultNumThreads()
benchmark(rcd(x,x,density="kde"),replications = 1)
x=runif(10000)
benchmark(rcd(x,x,density="kde"),replications = 1)
install.packages("scov")
library(devtools)
library(spatialcov)
devtools::install_git("liyi-1989/spatialcov")
devtools::install_git("liyi-1989","spatialcov")
devtools::install_github("liyi-1989/spatialcov")
?doubetaper
library(spatialcov)
doubletaper
remove.packages("spatialcov", lib="~/R/x86_64-pc-linux-gnu-library/3.2")
library("spatialcov", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.2")
library(spatialcov)
?doubletaper
library(MASS)
p1=25; p2=25; p=p1*p2; M=1; ck=cl=10; n=500;
nalpha=1:5
err_hat=err_band=err_taper=rep(0,length(nalpha))
for(i in nalpha){
a=1+i/10
cat("Decay Rate = ",a,"...\n")
S=doubleblock(p1,p2,M,a,a)
data = mvrnorm(n, mu = rep(0,p), Sigma = S)
S_hat=cov(data)
S_band=doubeltaper(S_hat,p1,p2,ck,cl,a,a,n,method="banding",Axis=0)
S_taper=doubeltaper(S_hat,p1,p2,ck,cl,a,a,n,method="tapering",Axis=0)
err_hat[i]=sqrt(sum((S_hat-S)^2))
err_band[i]=sqrt(sum((S_band-S)^2))
err_taper[i]=sqrt(sum((S_taper-S)^2))
}
plot(1+nalpha/10,err_hat/err_hat,col="black",type="o",ylim=c(0,1.5),
xlab="decay rate",ylab="Relative Error",main="Relative Error for Different Estimators")
lines(1+nalpha/10,err_band/err_hat,col="blue",type="o")
lines(1+nalpha/10,err_taper/err_hat,col="red",type="o")
legend("topright",c("Sample Covariance","Banding","Tapering"),col=c("black","blue","red"),
lty=rep(1,3),pch=rep(1,3),cex=0.5)
library(spatialcov)
?doubletaper
remove.packages("spatialcov", lib="~/R/x86_64-pc-linux-gnu-library/3.2")
devtools::install_github("liyi-1989/spatialcov")
library(spatialcov)
?doubletaper
library(spatialcov)
?doubletaper
library(MASS)
p1=25; p2=25; p=p1*p2; M=1; ck=cl=10; n=500;
nalpha=1:5
err_hat=err_band=err_taper=rep(0,length(nalpha))
for(i in nalpha){
a=1+i/10
cat("Decay Rate = ",a,"...\n")
S=doubleblock(p1,p2,M,a,a)
data = mvrnorm(n, mu = rep(0,p), Sigma = S)
S_hat=cov(data)
S_band=doubletaper(S_hat,p1,p2,ck,cl,a,a,n,method="banding",Axis=0)
S_taper=doubletaper(S_hat,p1,p2,ck,cl,a,a,n,method="tapering",Axis=0)
err_hat[i]=sqrt(sum((S_hat-S)^2))
err_band[i]=sqrt(sum((S_band-S)^2))
err_taper[i]=sqrt(sum((S_taper-S)^2))
}
plot(1+nalpha/10,err_hat/err_hat,col="black",type="o",ylim=c(0,1.5),
xlab="decay rate",ylab="Relative Error",main="Relative Error for Different Estimators")
lines(1+nalpha/10,err_band/err_hat,col="blue",type="o")
lines(1+nalpha/10,err_taper/err_hat,col="red",type="o")
legend("topright",c("Sample Covariance","Banding","Tapering"),col=c("black","blue","red"),
lty=rep(1,3),pch=rep(1,3),cex=0.5)
install.packages("tufte")
knit_with_parameters('~/Desktop/doc.Rmd')
system2('pandoc-citeproc', '--version')
setwd("~/Documents/esdcybersees")
source('functions.R')
MON=1:365
names(MON)=c(rep("JAN",31),rep("FEB",28),rep("MAR",31),rep("APR",30),rep("MAY",31),rep("JUN",30),
rep("JUL",31),rep("AUG",31),rep("SEP",30),rep("OCT",31),rep("NOV",30),rep("DEC",31))
Mon=data.frame(mon=as.character(unique(names(MON))),num=1:12,days=c(31,28,31,30,31,30,31,31,30,31,30,31))
################## 1. Read in the GCM data(train) ##################
mylon=c(-116.25,-113.75)
#mylon=c(-71.25,-68.75)
mylat=c(43,45)
mylon=c(-73.75,-71.25)
mylat=c(41,43)
mylon=c(-118.75,-116.25)
mylat=c(35,37)
# 1.1 training
# http://nomads.gfdl.noaa.gov:8080/DataPortal/cmip5.jsp RCP6 & historical
# X1=get_gcm(-113.75+180,43); X2=get_gcm(-113.75+180,45); X3=get_gcm(-116.25+180,45);
X=get_gcm_train(mylon[2]+360,mylat[2]) # X=(X1+X2+X3+X4)/4 # kg/m^2/s = mm/hr *3600
colnames(X)=1975:2005; rownames(X)=1:365 # rm(X1,X2,X3,X4)
X=X[,5:29] * 3600 * 24 # mm # 365 days * 25 years # http://weather.unisys.com/wxp/wxp5/Users/units.lup
# 1.2 testing
X_test=get_gcm_test(mylon[2]+360,mylat[2])
colnames(X_test)=2006:2015; rownames(X_test)=1:365
X_test=X_test * 3600 * 24
ncin = nc_open(paste0("./obs_in_grid/","obs_in_grid_",mylon[1],"-",mylat[1],".nc"))
lon = ncvar_get(ncin,"longitude")
lat = ncvar_get(ncin,"latitude")
t1=ncvar_get(ncin,"time")
Pr=ncvar_get(ncin,"precipitation") # 60*48*[365*37]
# 2.1 testing
t1_test=t1[-(1:(365*27))]
Pr_test=Pr[,,-(1:(365*27))]
# 2.2 training
t1=t1[1:(365*25)]
Pr=Pr[,,1:(365*25)]
dim(Pr)
dim(Pr_test)
9125/365
dim(t1)
dim(t1_test)
t1_test
